// app.module.ts (todo el proyecto en uno solo)
import { NgModule, Component, EventEmitter, Output } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';
import { RouterModule, Routes } from '@angular/router';
import { StoreModule, Action, createReducer, on } from '@ngrx/store';
import { createAction, props, Store } from '@ngrx/store';
import { Observable } from 'rxjs';

// ------------------ ACTIONS ------------------
export const agregarItem = createAction('[Items] Agregar', props<{ item: string }>());
export const borrarItem = createAction('[Items] Borrar', props<{ index: number }>());
export const votarAFavor = createAction('[Items] Votar AFavor', props<{ index: number }>());
export const votarEnContra = createAction('[Items] Votar EnContra', props<{ index: number }>());

// ------------------ REDUCER ------------------
export interface Item {
  nombre: string;
  votos: number;
}

export const initialState: Item[] = [
  { nombre: 'Elemento 1', votos: 0 },
  { nombre: 'Elemento 2', votos: 0 }
];

export const itemsReducer = createReducer(
  initialState,
  on(agregarItem, (state, { item }) => [...state, { nombre: item, votos: 0 }]),
  on(borrarItem, (state, { index }) => state.filter((_, i) => i !== index)),
  on(votarAFavor, (state, { index }) =>
    state.map((el, i) => i === index ? { ...el, votos: el.votos + 1 } : el)
  ),
  on(votarEnContra, (state, { index }) =>
    state.map((el, i) => i === index ? { ...el, votos: el.votos - 1 } : el)
  )
);

// ------------------ COMPONENTES ------------------

// APP
@Component({
  selector: 'app-root',
  template: `
    <h1>Proyecto Angular</h1>
    <router-outlet></router-outlet>
  `
})
export class AppComponent { }

// PADRE
@Component({
  selector: 'app-padre',
  template: `
    <h2>Componente Padre</h2>
    <app-hijo-form (formularioEnviado)="onFormularioEnviado($event)"></app-hijo-form>
    <app-votos></app-votos>
  `
})
export class PadreComponent {
  onFormularioEnviado(data: any) {
    console.log('Padre recibi√≥ del hijo:', data);
  }
}

// HIJO
@Component({
  selector: 'app-hijo-form',
  template: `
    <h3>Formulario del Hijo</h3>
    <form [formGroup]="form" (ngSubmit)="enviar()">
      <label>Nombre:</label>
      <input type="text" formControlName="nombre">
      <div *ngIf="nombre?.hasError('required')">El nombre es requerido</div>

      <label>Edad:</label>
      <input type="text" formControlName="edad">
      <div *ngIf="edad?.hasError('required')">La edad es requerida</div>
      <div *ngIf="edad?.hasError('edadInvalida')">
        La edad debe ser mayor o igual a {{edad?.getError('edadInvalida')?.min}}
      </div>

      <button type="submit">Enviar</button>
    </form>
  `
})
export class HijoFormComponent {
  @Output() formularioEnviado = new EventEmitter<any>();
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      nombre: ['', [Validators.required]],
      edad: ['', [Validators.required, this.validarEdad(18)]]
    });
  }

  validarEdad(min: number) {
    return (control: AbstractControl): ValidationErrors | null => {
      const value = control.value;
      return value && value < min ? { edadInvalida: { min } } : null;
    };
  }

  enviar() {
    if (this.form.valid) {
      this.formularioEnviado.emit(this.form.value);
    }
  }

  get nombre() { return this.form.get('nombre'); }
  get edad() { return this.form.get('edad'); }
}

// VOTOS
@Component({
  selector: 'app-votos',
  template: `
    <h3>Listado con votos</h3>
    <ul>
      <li *ngFor="let item of (items$ | async); let i = index">
        {{item.nombre}} - Votos: {{item.votos}}
        <button (click)="upvote(i)">üëç</button>
        <button (click)="downvote(i)">üëé</button>
      </li>
    </ul>
  `
})
export class VotosComponent {
  items$: Observable<Item[]>;

  constructor(private store: Store<{ items: Item[] }>) {
    this.items$ = this.store.select('items');
  }

  upvote(index: number) {
    this.store.dispatch(votarAFavor({ index }));
  }

  downvote(index: number) {
    this.store.dispatch(votarEnContra({ index }));
  }
}

// ------------------ RUTAS ------------------
const routes: Routes = [
  { path: '', redirectTo: 'padre', pathMatch: 'full' },
  { path: 'padre', component: PadreComponent }
];

// ------------------ M√ìDULO ------------------
@NgModule({
  declarations: [
    AppComponent,
    PadreComponent,
    HijoFormComponent,
    VotosComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    RouterModule.forRoot(routes),
    StoreModule.forRoot({ items: itemsReducer })
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

