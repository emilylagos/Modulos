// ======================================
// backend: server.js (API simple con Express)
// ======================================
import express from 'express';
import bodyParser from 'body-parser';
const app = express();
const PORT = 3000;

app.use(bodyParser.json());

let elementos: { id: number; nombre: string }[] = [];
let idSeq = 1;

// GET elementos
app.get('/elementos', (req, res) => res.json(elementos));

// POST agregar elemento
app.post('/elementos', (req, res) => {
  const { nombre } = req.body;
  if (!nombre) return res.status(400).json({ error: 'Nombre requerido' });
  const nuevo = { id: idSeq++, nombre };
  elementos.push(nuevo);
  res.json(nuevo);
});

app.listen(PORT, () => console.log(`API corriendo en http://localhost:${PORT}`));


// ======================================
// Angular: app.module.ts
// ======================================
import { NgModule, InjectionToken, Injectable } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule, Routes, CanActivate } from '@angular/router';
import { StoreModule, createAction, props, createReducer, on, Store } from '@ngrx/store';
import Dexie from 'dexie';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

// ----------------- CONFIG / INJECTION TOKEN -----------------
export const CONFIG_TOKEN = new InjectionToken<{ apiUrl: string }>('CONFIG');

// ----------------- REDUX -----------------
export interface Elemento { id: number; nombre: string }
export const agregarElemento = createAction('[API] Agregar', props<{ elemento: Elemento }>());
export const initialState: Elemento[] = [];
export const elementosReducer = createReducer(initialState, on(agregarElemento, (state, { elemento }) => [...state, elemento]));

// ----------------- DEXIE -----------------
@Injectable({ providedIn: 'root' })
export class DbService extends Dexie {
  elementos: Dexie.Table<Elemento, number>;
  constructor() {
    super('MiDB');
    this.version(1).stores({ elementos: '++id,nombre' });
    this.elementos = this.table('elementos');
  }
}

// ----------------- API SERVICE -----------------
@Injectable({ providedIn: 'root' })
export class ApiService {
  constructor(private http: HttpClient, private store: Store<{ elementos: Elemento[] }>, private db: DbService, private config: { apiUrl: string }) {}
  
  getElementos(): Observable<Elemento[]> {
    return this.http.get<Elemento[]>(`${this.config.apiUrl}/elementos`);
  }

  agregarElemento(nombre: string) {
    return this.http.post<Elemento>(`${this.config.apiUrl}/elementos`, { nombre }).pipe(
      tap(async (el) => {
        this.store.dispatch(agregarElemento({ elemento: el }));
        await this.db.elementos.add(el);
      })
    );
  }
}

// ----------------- GUARD -----------------
@Injectable({ providedIn: 'root' })
export class AuthService {
  isLoggedIn = false;
}

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
  constructor(private auth: AuthService) {}
  canActivate(): boolean { return this.auth.isLoggedIn; }
}

// ----------------- COMPONENTES -----------------
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({ selector: 'app-login', template: `
<form [formGroup]="form" (ngSubmit)="login()">
<input formControlName="usuario" placeholder="Usuario">
<input formControlName="password" placeholder="Password" type="password">
<button type="submit">Login</button>
</form>`})
export class LoginComponent {
  form: FormGroup;
  constructor(private fb: FormBuilder, private auth: AuthService) {
    this.form = this.fb.group({ usuario: ['', Validators.required], password: ['', Validators.required] });
  }
  login() { if (this.form.valid) this.auth.isLoggedIn = true; }
}

@Component({ selector: 'app-protegido', template: `<h2>Zona Protegida</h2>` })
export class ProtegidoComponent {}

@Component({ selector: 'app-agregar', template: `
<form [formGroup]="form" (ngSubmit)="submit()">
<input formControlName="nombre" placeholder="Nombre elemento">
<button type="submit">Agregar</button>
</form>
`})
export class AgregarComponent {
  form: FormGroup;
  constructor(private fb: FormBuilder, private api: ApiService) {
    this.form = this.fb.group({ nombre: ['', Validators.required] });
  }
  submit() {
    if (this.form.valid) this.api.agregarElemento(this.form.value.nombre).subscribe();
  }
}

// ----------------- RUTAS -----------------
const routes: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'protegido', component: ProtegidoComponent, canActivate: [AuthGuard] }
];

// ----------------- MÃ“DULO -----------------
@NgModule({
  declarations: [LoginComponent, ProtegidoComponent, AgregarComponent],
  imports: [BrowserModule, ReactiveFormsModule, HttpClientModule, RouterModule.forRoot(routes), StoreModule.forRoot({ elementos: elementosReducer })],
  providers: [
    { provide: CONFIG_TOKEN, useValue: { apiUrl: 'http://localhost:3000' } },
    { provide: ApiService, useClass: ApiService }, // ejemplo de useClass
    { provide: AuthService, useExisting: AuthService } // ejemplo de useExisting
  ],
  bootstrap: [LoginComponent]
})
export class AppModule {}

